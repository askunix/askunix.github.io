<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Askunix&#39;s Blog</title>
  
  <subtitle>不积跬步无以至千里</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-17T07:41:04.858Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>何进鸿</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C语言版通讯录</title>
    <link href="http://yoursite.com/2018/06/17/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E4%B8%80%E8%88%AC%E9%80%9A%E8%AE%AF%E5%BD%95/"/>
    <id>http://yoursite.com/2018/06/17/C语言实现一般通讯录/</id>
    <published>2018-06-17T07:09:27.000Z</published>
    <updated>2018-06-17T07:41:04.858Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><hr><p>C语言通讯录可以用来存储1000个人的信息，</p><p>每个人的信息包括姓名、年龄、性别、电话、住址,</p><p>实现基本的增、删、查、改、排序、打印、清空基本功能。</p><hr><a id="more"></a><p><img src="http://p9ff104hp.bkt.clouddn.com/44.png" alt="图片加载失败"></p><h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析:"></a>思路分析:</h4><ul><li><p>首先我们可以分三个模块来解决这个问题，第一个模块我们需要一个头文件，这个头文件里可以包含一些相应信息，当实现文件和测试文件包含自己定义的头文件时便可以获得一些相关的信息。所以头文件里应该包括一个结构体，这个结构体里应包含姓名，性别，年龄，电话，住址。同时还可以定义一个结构体，这个结构体里包含通讯录，同时通讯录里人员的计数变量，将通讯录的地址传到别的地方便可以实现对它遍历或者其他操作。</p></li><li><p>第二个模块便是我们的测试函数，测试函数便可以实现我们的菜单打印，同时由我们接收不同的值便可以实现不同的操作，就是相应的方法的实现，这里很明显可以通过一个switch语句来控制功能选择，用do-while语句来控制重复选择的循环部分。</p></li></ul><ul><li>第三个模块便是我们的方法实现的函数，将模块2里定义的类型为通讯录的地址传到各个方法里，这样便可以实现对通讯录的操作。</li></ul><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="头文件：-lt-contect-h-gt"><a href="#头文件：-lt-contect-h-gt" class="headerlink" title="头文件： &lt;contect.h&gt;"></a>头文件： <code>&lt;contect.h&gt;</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NAME_MAX 20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEL_MAX 12</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SEX_MAX 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span>&#123; Exit, Add, Del, Search, Modify, Empty, Sort, Show&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> Name[NAME_MAX];</span><br><span class="line"><span class="keyword">int</span> Age;</span><br><span class="line"><span class="keyword">char</span> Tel[TEL_MAX];</span><br><span class="line"><span class="keyword">char</span> Sex[SEX_MAX];</span><br><span class="line"><span class="keyword">char</span> Address[<span class="number">50</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">Stu</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Contact</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">Stu Con[MAX];       <span class="comment">//容量</span></span><br><span class="line"><span class="keyword">int</span> sz;     <span class="comment">//计数</span></span><br><span class="line">&#125;Contact, *pContact;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitContact</span><span class="params">(pContact pCon)</span></span>;  <span class="comment">//初始化</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddContact</span><span class="params">(pContact pCon)</span></span>;   <span class="comment">//新建</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowContact</span><span class="params">(pContact pCon)</span></span>;  <span class="comment">//打印</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DelContact</span><span class="params">(pContact pCon)</span></span>;   <span class="comment">//删除</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SearchContact</span><span class="params">(pContact pCon)</span></span>;   <span class="comment">//查找</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ModifyContact</span><span class="params">(pContact pCon)</span></span>;    <span class="comment">//修改</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EmptyContact</span><span class="params">(pContact pCon)</span></span>;    <span class="comment">//清空</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SortContact</span><span class="params">(pContact pCon)</span></span>;    <span class="comment">//排序</span></span><br></pre></td></tr></table></figure><h5 id="函数实现：-contect-cpp"><a href="#函数实现：-contect-cpp" class="headerlink" title="函数实现： contect.cpp"></a>函数实现： <code>contect.cpp</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"contect.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitContact</span><span class="params">(pContact pCon)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pCon-&gt;sz = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(pCon-&gt;Con, <span class="number">0</span>, MAX * <span class="keyword">sizeof</span>(Stu));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddContact</span><span class="params">(pContact pCon)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入联系人姓名："</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; pCon-&gt;Con[pCon-&gt;sz].Name;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入联系人年龄："</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; pCon-&gt;Con[pCon-&gt;sz].Age;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入联系人电话："</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; pCon-&gt;Con[pCon-&gt;sz].Tel;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入联系人性别："</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; pCon-&gt;Con[pCon-&gt;sz].Sex;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入联系人地址："</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; pCon-&gt;Con[pCon-&gt;sz].Address;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"═════联系人 "</span> &lt;&lt; pCon-&gt;Con[pCon-&gt;sz].Name &lt;&lt; <span class="string">" 的信息保存成功════"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">pCon-&gt;sz++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowContact</span><span class="params">(pContact pCon)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"╔═════════════════════════════════════════════════════════════╗"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%3s\t%6s\t%2s%16s%8s%20s\n"</span>,<span class="string">"║序号"</span>,<span class="string">"姓名"</span>,<span class="string">"年龄"</span>,<span class="string">"电话"</span>,<span class="string">"性别"</span>,<span class="string">"地址║"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pCon-&gt;sz; i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%3d\t%6s\t%2d%16s%8s%20s\n"</span>,</span><br><span class="line">i + <span class="number">1</span>,</span><br><span class="line">pCon-&gt;Con[i].Name,</span><br><span class="line">pCon-&gt;Con[i].Age,</span><br><span class="line">pCon-&gt;Con[i].Tel,</span><br><span class="line">pCon-&gt;Con[i].Sex,</span><br><span class="line">pCon-&gt;Con[i].Address);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"╚═════════════════════════════════════════════════════════════╝"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"温馨提示：输出完成！！！"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindInContact</span><span class="params">(pContact pCon, <span class="keyword">char</span> *ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pCon-&gt;sz; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(pCon-&gt;Con[i].Name,ch) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DelContact</span><span class="params">(pContact pCon)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">20</span>];</span><br><span class="line">ShowContact(pCon);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入上面通讯录中要删除联系人的姓名："</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;ch);</span><br><span class="line"><span class="keyword">int</span> NUM = FindInContact(pCon, ch);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"通讯录中没有该联系人！！！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (NUM &lt;= pCon-&gt;sz &amp;&amp; NUM != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = NUM; j &lt;= pCon-&gt;sz<span class="number">-1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">pCon-&gt;sz--;</span><br><span class="line">pCon-&gt;Con[j] = pCon-&gt;Con[j + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"删除成功！！！\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SearchContact</span><span class="params">(pContact pCon)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输出你要查找联系人的姓名："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;ch);</span><br><span class="line"><span class="keyword">int</span> NUM = FindInContact(pCon, ch);</span><br><span class="line"><span class="keyword">if</span> (NUM != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"╔═════════════════════════════════════════════════════════════╗"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%3s\t%6s\t%2s%16s%8s%20s\n"</span>, <span class="string">"║序号"</span>, <span class="string">"姓名"</span>, <span class="string">"年龄"</span>, <span class="string">"电话"</span>, <span class="string">"性别"</span>, <span class="string">"地址║"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%3d\t%6s\t%2d%16s%8s%20s\n"</span>,</span><br><span class="line">NUM + <span class="number">1</span>,</span><br><span class="line">pCon-&gt;Con[NUM].Name,</span><br><span class="line">pCon-&gt;Con[NUM].Age,</span><br><span class="line">pCon-&gt;Con[NUM].Tel,</span><br><span class="line">pCon-&gt;Con[NUM].Sex,</span><br><span class="line">pCon-&gt;Con[NUM].Address);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"╚═════════════════════════════════════════════════════════════╝"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"你要找的联系人不存在\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ModifyContact</span><span class="params">(pContact pCon)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch[NAME_MAX];</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入要修改的联系人的姓名："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;ch);</span><br><span class="line"><span class="keyword">int</span> NUM = FindInContact(pCon, ch);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (NUM != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"╔═════════════════════════════════════════════════════════════╗"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%3s\t%6s\t%2s%16s%8s%20s\n"</span>, <span class="string">"║序号"</span>, <span class="string">"姓名"</span>, <span class="string">"年龄"</span>, <span class="string">"电话"</span>, <span class="string">"性别"</span>, <span class="string">"地址║"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%3d\t%6s\t%2d%16s%8s%20s\n"</span>,</span><br><span class="line">NUM,</span><br><span class="line">pCon-&gt;Con[NUM].Name,</span><br><span class="line">pCon-&gt;Con[NUM].Age,</span><br><span class="line">pCon-&gt;Con[NUM].Tel,</span><br><span class="line">pCon-&gt;Con[NUM].Sex,</span><br><span class="line">pCon-&gt;Con[NUM].Address);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"╚═════════════════════════════════════════════════════════════╝"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请把姓名修改成："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, pCon-&gt;Con[NUM].Name);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请把年龄修改成："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;pCon-&gt;Con[NUM].Age);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请把电话修改成："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, pCon-&gt;Con[NUM].Tel);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请把性别修改成："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, pCon-&gt;Con[NUM].Sex);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请把地址修改成："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, pCon-&gt;Con[NUM].Address);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EmptyContact</span><span class="params">(pContact pCon)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pCon-&gt;sz = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"清空成功！！！\n\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SortContact</span><span class="params">(pContact pCon)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pCon-&gt;sz; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; pCon-&gt;sz-i<span class="number">-1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(pCon-&gt;Con[j].Name, pCon-&gt;Con[j + <span class="number">1</span>].Name)&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Stu temp;</span><br><span class="line">temp = pCon-&gt;Con[j];</span><br><span class="line">pCon-&gt;Con[j] = pCon-&gt;Con[j + <span class="number">1</span>];</span><br><span class="line">pCon-&gt;Con[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试函数：-test-cpp"><a href="#测试函数：-test-cpp" class="headerlink" title="测试函数： test.cpp"></a>测试函数： <code>test.cpp</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"contect.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"╔═══════════════════════════════════════════════════╗"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"║═══════════════════  通讯录  ══════════════════════║"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"║═══                                             ═══║"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"║═══           1.新建           2.删除           ═══║"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"║═══           3.查找           4.修改           ═══║"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"║═══           5.清空           6.排序           ═══║"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"║═══           7.打印           0.退出           ═══║"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"║═══                                             ═══║"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"╚═══════════════════════════════════════════════════╝"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">system(<span class="string">"color c"</span>); <span class="comment">//改变背景</span></span><br><span class="line">Contact my_con;</span><br><span class="line">InitContact(&amp;my_con);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> input = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">menu();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请选择："</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; input;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (input)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> Exit:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> Add:</span><br><span class="line">AddContact(&amp;my_con);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> Del:</span><br><span class="line">DelContact(&amp;my_con);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> Search:</span><br><span class="line">SearchContact(&amp;my_con);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> Modify:</span><br><span class="line">ModifyContact(&amp;my_con);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> Empty:</span><br><span class="line">EmptyContact(&amp;my_con);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> Sort:</span><br><span class="line">SortContact(&amp;my_con);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> Show:</span><br><span class="line">ShowContact(&amp;my_con);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"选择错误：-&gt;!!!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h5><p><img src="http://p9ff104hp.bkt.clouddn.com/777777.png" alt="图片加载失败"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;C语言通讯录可以用来存储1000个人的信息，&lt;/p&gt;
&lt;p&gt;每个人的信息包括姓名、年龄、性别、电话、住址,&lt;/p&gt;
&lt;p&gt;实现基本的增、删、查、改、排序、打印、清空基本功能。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="小项目" scheme="http://yoursite.com/categories/%E5%B0%8F%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="C语言版通讯录" scheme="http://yoursite.com/tags/C%E8%AF%AD%E8%A8%80%E7%89%88%E9%80%9A%E8%AE%AF%E5%BD%95/"/>
    
      <category term="结构体存储通讯录" scheme="http://yoursite.com/tags/%E7%BB%93%E6%9E%84%E4%BD%93%E5%AD%98%E5%82%A8%E9%80%9A%E8%AE%AF%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>TCP建立和断开连接过程（三次握手&amp;四次挥手）.md</title>
    <link href="http://yoursite.com/2018/06/15/TCP%E5%BB%BA%E7%AB%8B%E5%92%8C%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B%EF%BC%88%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B&amp;%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%EF%BC%89/"/>
    <id>http://yoursite.com/2018/06/15/TCP建立和断开连接过程（三次握手&amp;四次挥手）/</id>
    <published>2018-06-15T00:25:40.000Z</published>
    <updated>2018-06-17T07:41:06.058Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="SO Kernal" scheme="http://yoursite.com/categories/SO-Kernal/"/>
    
    
      <category term="ACK机制" scheme="http://yoursite.com/tags/ACK%E6%9C%BA%E5%88%B6/"/>
    
      <category term="TCP连接过程" scheme="http://yoursite.com/tags/TCP%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B/"/>
    
      <category term="TCP断开连接" scheme="http://yoursite.com/tags/TCP%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5/"/>
    
      <category term="三次握手" scheme="http://yoursite.com/tags/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/"/>
    
      <category term="四次挥手" scheme="http://yoursite.com/tags/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    
  </entry>
  
  <entry>
    <title>保证TCP协议的可靠传输</title>
    <link href="http://yoursite.com/2018/05/31/TCp%E5%8D%8F%E8%AE%AE%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93/"/>
    <id>http://yoursite.com/2018/05/31/TCp协议可靠传输/</id>
    <published>2018-05-31T14:34:00.000Z</published>
    <updated>2018-06-17T07:41:03.684Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><hr><p>TCP协议在网络传输中保证了其可靠性，本篇文章对TCP协议可靠传输机制做了详细介绍，</p><p>介绍：（ACK机制&amp;滑动窗口&amp;拥塞控制&amp;流量控制）。</p><hr><a id="more"></a><h4 id="回顾内容"><a href="#回顾内容" class="headerlink" title="回顾内容"></a>回顾内容</h4><blockquote><p>传输层使用的两个主要协议：TCP和UDP</p></blockquote><ul><li><strong>TCP 主要特性有特性有以下几点：</strong></li></ul><p>　　(1)面向连接，在数据传送前必须建立连接，在数据传送结束后必须释放连接。在一个TCP连接中，仅有两方进行彼此通信。广播和多播不能用于TCP。</p><p>　　(2)点对点，每一条TCP连接只能有两个端点。从socket角度来说，通信双方需要建立套接字，套接字由IP地址和端口号组成，数据到达传输层之后会被送到端口对应的应用程序。</p><p>　　(3)提供可靠交付服务。</p><p>　　(4)支持全双工通信。</p><p>　　(5)面向字节流。面向报文的传输方式是应用层交给UDP多长的报文，UDP就照样发送，即一次发送一个报文。因此，应用程序必须选择合适大小的报文。若报文太长，则IP层需要分片，降低效率。若太短，会是IP太小。UDP对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。这也就是说，应用层交给UDP多长的报文，UDP就照样发送，即一次发送一个报文。面向字节流的话，虽然应用程序和TCP的交互是一次一个数据块(大小不等)，但TCP把应用程序数据看成是一连串的无结构的字节流。TCP有一个缓冲，当应用程序传送的数据块太长，TCP就可以把它划分短一些再传送。如果应用程序一次只发送一个字节，TCP也可以等待积累有足够多的字节后再构成报文段发送出去。</p><hr><h4 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h4><p>1、确认应答（ACK）机制：</p><p>2、超时重传机制：<br>　　接收方收到报文就会确认，发送方发送一段时间后没有收到确认就重传。</p><p>3、滑动窗口机制：</p><p>4、数据校验：</p><p>　　TCP将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP将丢弃这个报文段和不确认收到此报文段。</p><p>5、数据合理分片和排序：</p><p>　　UDP：IP数据报大于1500字节,大于MTU.这个时候发送方IP层就需要分片.把数据报分成若干片,使每一片都小于MTU.而接收方IP层则需要进行数据报的重组.这样就会多做许多事情,而更严重的是,由于UDP的特性,当某一片数据传送中丢失时,接收方便无法重组数据报.将导致丢弃整个UDP数据报.</p><p>　　TCP会按MTU合理分片，接收方会缓存未按序到达的数据，重新排序后再交给应用层。</p><p>5、流量控制：<br>　　当接收方来不及处理发送方的数据，就提示发送方降低发送的速率，防止包丢失。</p><p>7、拥塞控制：<br>　　当网络拥塞时，减少数据的发送。</p><blockquote><p>上面简单的讲了TCP保证可靠传输的几个机制，下面对较难理解的面深入探究。</p></blockquote><hr><h4 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h4><h5 id="滑动窗口是干什么的？"><a href="#滑动窗口是干什么的？" class="headerlink" title="滑动窗口是干什么的？"></a>滑动窗口是干什么的？</h5><p>有一种机制叫做ACK确认应答【过程如图】，收到数据段，给发送一个ACK确认应答，收到ACK应答后，再发送数据段，明显会降低效率，如果数据往返时间较长时，会影响到性能。</p><p><img src="http://p9ff104hp.bkt.clouddn.com/ACK%E7%A1%AE%E8%AE%A4%E6%9C%BA%E5%88%B6.png" alt="这里写图片描述"></p><p>上面这种方式浪费效率，如果换种方式发送呢  ^_^</p><ul><li>一次发送多个数据段，统一确认后，再发送多个数据段。</li></ul><p><img src="http://p9ff104hp.bkt.clouddn.com/%E5%A4%9A%E6%95%B0%E6%8D%AE%E5%8F%91%E9%80%81%E5%BA%94%E7%AD%94.png" alt="这里写图片描述"></p><blockquote><p>上面这种传送机制就是窗口机制。</p></blockquote><ul><li>窗口是什么？</li></ul><p><img src="http://p9ff104hp.bkt.clouddn.com/%E7%AA%97%E5%8F%A3%E5%A4%A7%E5%B0%8F.png" alt="这里写图片描述"></p><p>窗口大小：就是无需等到确认应答而可以继续发送数据的最大值。（上图窗口就是4000字节，也就是四个段）</p><ul><li>传输过程：</li></ul><p>1、客户端和服务器端各自建立套接字，通过彼此的套接字进行通信；</p><p>2、服务器端绑定监听端口，然后监听，循环等待来自客户端的连接；</p><p>3、一旦收到来自客户端的连接，进行三次握手，一旦连成功就fork()一个子进程来处理和当前客户端的连接，然后父进程继续监听客户端的连接；</p><p>4、发送前面四个段，无需ACK确认应答，直接发送；</p><p>5、收到第一个ACK后，滑动窗口向后移动，发送第五个数据段，以此类推；</p><p>6、操作系统为了维护这个滑动窗口，需要开辟发送缓冲区来记录当前还有那些数据没有应答，只有确认应答过的数据，才能从缓冲区删掉；</p><p>7、一旦数据传输完毕就是放连接。</p><blockquote><p>就是说随着时间推移，滑动窗口也在推移，滑动窗口的会变化，内部缓存数据不停的更新，根据网络的拥塞情况，发送端可以调控滑动窗口的大小来控制流量 ，滑动窗口就是一个滑的过程啊~     ^<em>*  ~ ^</em>*   可能解释的有点啰嗦了</p></blockquote><p>4、窗口越大，网络吞吐量就越高。</p><blockquote><p>吞吐量就是单位时间内通过某个网络（信道、接口）的数据量。</p></blockquote><ul><li>接收窗口大小取决于应用（比如说tomcat：8080端口的监听进程）、系统、硬件的限制。</li></ul><hr><h5 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h5><p>简单来说就是接收方处理不过来的时候，就把窗口缩小，并把窗口值告诉发送端。</p><p><img src="http://p9ff104hp.bkt.clouddn.com/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E4%B8%BE%E4%BE%8B.png" alt="这里写图片描述"></p><p>　　当窗口值为0，而接受方把窗口值恢复（比如ACK=1，ack=601，rwnd=200），但确认丢失，进入相互等待的死锁局面。所以如果窗口值为0，发送端就会开启一个持续计数器，每个一段时间询问一下接收方。</p><hr><h5 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h5><ul><li>什么是拥塞？</li></ul><p>　　是指计算机网络中，某一个时段，某一资源的需求量超过了该资源可提供的可用部分，网络性能变差。</p><ul><li>什么是拥塞控制？</li></ul><p>　　所谓的拥塞控制就是防止过多的数据注入到网络中，这样可以使网络中的路由器或者节点不至于过载，拥塞控制是一个全局的过程。</p><ul><li>几种拥塞控制的方法：因特网建议标准RFC定义了几种拥塞控制的算法；</li></ul><blockquote><ul><li>满开始，拥塞避免，</li><li>快重传，快恢复。</li></ul></blockquote><ul><li><strong>拥塞控制描述：</strong></li></ul><p>　　唯一的方法就是尝试各种不同的发送速度。比如一开始以 100kb/s 的速率发送数据，如果没问题，再将速率提高到 200kb/s，再没问题继续提升发送速率。一旦达到某个上限后，便开始出现丢包现象，发送方就可以认为，网络已经拥塞了，于是降低发送速率，减轻网络负担。</p><ul><li><strong>控制流程简述：</strong></li></ul><blockquote><p><strong>慢开始、拥塞避免</strong></p></blockquote><p>　　发送方维持一个拥塞窗口的状态变量，其大小取决于网络的拥塞程度，动态地变化，而发送窗口一般取拥塞窗口和对方给出的接收窗口的最小值（为了便于描述，后面的分析中假定对方给出的接收窗口足够大，这样将发送窗口等于拥塞窗口就可以了）。</p><p>　　慢开始算法的核心是从小到大逐渐增大发送窗口，也就是说，从小到大逐渐增大拥塞窗口的数值。通常在刚开始发送报文段时，先把拥塞窗口设置为一个最大报文段MSS的数值，而在每收到对上一轮报文段（，每次加倍后的报文段的个数，可能不止一个报文段）的确认后，就把拥塞窗口的数值加倍。</p><p>　　为了防止拥塞窗口增长过大引起网络拥塞，还需要维护一个慢开始门限的状态变量，当拥塞窗口的值小于慢开始门限时，使用慢开始算法，一旦拥塞窗口的值大于慢开始门限的值，就改用拥塞避免算法。</p><p>　　拥塞避免算法的思路是让拥塞窗口缓慢地增大，收到每一轮的确认后，将拥塞窗口的值加1，而不是加倍，这样拥塞窗口的值按照线性规律缓慢增长。</p><p>　　无论是在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（没有按时收到确认），就把慢开始门限设置为出现拥塞时发送窗口值的一般，但最小不能小于2个MSS值，而后把拥塞窗口的值重新设置为1个MSS，执行慢开始算法。</p><blockquote><p><strong>快重传，快恢复</strong></p></blockquote><p>　　快重传算法首先要求接收方每收到一个失序的报文段后就立即发出重复确认（重复发送对前面有序部分的确认），而不是等待自己发送数据时才进行稍待确认，也不是累积收到的报文发送累积确认，如果发送方连续收到三个重复确认，就应该立即重传对方未收到的报文段（有收到重复确认，说明后面的报文段都送达了，只有中间丢失的报文段没送达）。</p><p>快恢复算法与快重传算法配合使用，其过程有如下两个要点：</p><p>　　1、当发送方连续收到三个重复确认时，就把慢开始门限减半，这是为了预防网络发生拥塞。注意，接下来不执行慢开始算法。</p><p>　　2、由于发送方现在认为网络很很可能没有发生特别严重的阻塞（如果发生了严重阻塞的话，就不会一连有好几个报文段到达接收方，就不会导致接收方连续发送重复确认），因此与慢开始不同之处是现在不执行慢开始算法（即拥塞窗口的值不设为1个MSSS），而是把拥塞窗口的值设为慢开始门限减半后的值，而后开始执行拥塞避免算法，线性地增大拥塞窗口。</p><h4 id="问题思考"><a href="#问题思考" class="headerlink" title="问题思考"></a>问题思考</h4><p>1、网络拥堵是怎么来的？</p><p>2、RFC 定义的 4 种拥塞控制算法是什么？分别讲述流程以及原理？</p><p>3、为什么TCP传输这么复杂？</p><blockquote><p>因为要保证可靠传输，同时又要尽可能提高性能。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;TCP协议在网络传输中保证了其可靠性，本篇文章对TCP协议可靠传输机制做了详细介绍，&lt;/p&gt;
&lt;p&gt;介绍：（ACK机制&amp;amp;滑动窗口&amp;amp;拥塞控制&amp;amp;流量控制）。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="SO Kernal" scheme="http://yoursite.com/categories/SO-Kernal/"/>
    
    
      <category term="TCP协议" scheme="http://yoursite.com/tags/TCP%E5%8D%8F%E8%AE%AE/"/>
    
      <category term="ACK机制" scheme="http://yoursite.com/tags/ACK%E6%9C%BA%E5%88%B6/"/>
    
      <category term="滑动窗口" scheme="http://yoursite.com/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
      <category term="拥塞控制" scheme="http://yoursite.com/tags/%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/"/>
    
      <category term="流量控制" scheme="http://yoursite.com/tags/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>UDP协议实现回显服务器</title>
    <link href="http://yoursite.com/2018/05/22/%E5%9F%BA%E4%BA%8EUDP%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%9B%9E%E6%98%BE%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/2018/05/22/基于UDP协议的回显服务器/</id>
    <published>2018-05-21T17:14:30.000Z</published>
    <updated>2018-06-17T07:41:08.826Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><hr><p>回显服务器的代码实现过程，文章加入了详细的设计过程以及其他的计算机网络理论知识。</p><p>操作环境：CentOS 7.0 X64 操作系统、Vim编辑器、Gcc编译器。</p><hr><a id="more"></a><p><img src="http://p9ff104hp.bkt.clouddn.com/%E7%BD%91%E7%BB%9C.jpg" alt="图片加载失败"></p><h4 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h4><ul><li>本文的目的是写回显服务器，在撸代码之前，先来个热身。</li></ul><h5 id="IP地址是什么"><a href="#IP地址是什么" class="headerlink" title="IP地址是什么"></a>IP地址是什么</h5><p>IP地址有IPV4、IPV6之分，一般不特俗说明，默认就是IPV4。</p><blockquote><p>IP地址是用来标识不同的主机，每个主机都有唯一的IP地址；<br>对于IP4来说，IP地址是一个4字节，32位整数；<br>IP地址用“点分”制表示，如：192.168.1.11（用点分割的每个数范围0~255）。</p></blockquote><h5 id="源IP地址-amp-目的IP地址"><a href="#源IP地址-amp-目的IP地址" class="headerlink" title="源IP地址&amp;目的IP地址"></a>源IP地址&amp;目的IP地址</h5><blockquote><p>很容易理解，都是地址，和寄快递的收发地址一样，从上海发往西安的快递，源IP就是上海，目的IP就是西安。</p></blockquote><h5 id="端口号是什么"><a href="#端口号是什么" class="headerlink" title="端口号是什么"></a>端口号是什么</h5><ul><li>端口号是传输层协议内容</li></ul><blockquote><p>端口号是2字节196位整数；<br>端口号用来标识一个进程，告诉操作系统，当前数据要交给哪一个进程来处理；<br><strong>一个进程可以绑定多个端口号，但是一个端口号不可以绑定多个进程。</strong></p></blockquote><h5 id="源端口号-amp-目的端口号"><a href="#源端口号-amp-目的端口号" class="headerlink" title="源端口号&amp;目的端口号"></a>源端口号&amp;目的端口号</h5><blockquote><p>在源IP&amp;目的IP中，我们用的寄快递的例子帮助理解，在这里，还是用发快递帮助理解。源IP与目的IP标识了发件人地址和收件人的地址，地址有了，那么包裹就会交给快递员运送每个，快递员都有一个工号，工号是唯一的。这就对应了数据传输过程中，由哪个进程来处理数据。再来到寄快递问题上，有的快递包裹比较大，这就要多个快递员来运输，那么一个包裹由多个快递员运输，记在物流信息上就是这样的格式：一个包裹的目的地 + 多个快递员工号；这家公司接的都是大包裹，一个快递员只能送一个包裹。对应到网络传输中，就是一个进程可以绑定多个端口号，但一个端口号不可以绑定多个进程。</p></blockquote><hr><h4 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h4><ul><li>为后面撸代码介绍几个函数。</li></ul><h5 id="网络字节序："><a href="#网络字节序：" class="headerlink" title="网络字节序："></a>网络字节序：</h5><p>在C语言中我们知道，内存中的数据存储有大小端之分；数据在磁盘中存储也有大小端之分，在这里我还想啰嗦一个C语言问题，怎样判断自己的计算机内存是大端字节序还是小端字节序存储方式？[假装思索……]</p><ul><li>大小端判断很有可能成为你将来的面试题。以前我总结过这样的问题。</li><li>以后再附上链接：哈哈</li></ul><ul><li>（只想引入下面一句话）在网络数据流中同样有大小端之分，那么如何定义网络数据流的地址呢？</li></ul><p>【看图理解】</p><p><img src="http://p9ff104hp.bkt.clouddn.com/%E6%95%B0%E6%8D%AE%E5%8F%91%E9%80%81.jpg" alt="图片加载失败"></p><p>【看图说话】</p><p><img src="http://p9ff104hp.bkt.clouddn.com/%E8%A7%84%E5%AE%9A.jpg" alt="图片加载失败"></p><ul><li>如果发送主机是小端，就要准换成大端再发送，如果是大端，直接发送即可。</li></ul><blockquote><p>为了使网络程序具有可移植性,使同样的C代码在大端和小端计算机上编译后都能正常运行,可以调用以下库函数做网络字节序和主机字节序的转换。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line">   <span class="keyword">uint32_t</span> htonl(<span class="keyword">uint32_t</span> hostlong);</span><br><span class="line">   <span class="keyword">uint16_t</span> htons(<span class="keyword">uint16_t</span> hostshort);</span><br><span class="line">   <span class="keyword">uint32_t</span> ntohl(<span class="keyword">uint32_t</span> netlong);</span><br><span class="line">   <span class="keyword">uint16_t</span> ntohs(<span class="keyword">uint16_t</span> netshort);</span><br></pre></td></tr></table></figure><blockquote><p>调用函数就能解决存储字节序不统一的问题</p></blockquote><h5 id="socket编程常见API："><a href="#socket编程常见API：" class="headerlink" title="socket编程常见API："></a>socket编程常见API：</h5><p>这部分只把函数列出来，详细介绍请戳作者下面博客：</p><p><strong> 请戳： </strong><a href="https://blog.csdn.net/m0_37925202/article/details/80286946" target="_blank" rel="noopener">socket套接字总结</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建socket文件描述符  (TCP/UDP,客户端+服务器)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span> domain, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ssize_t</span> sendto(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags, <span class="keyword">const</span> struct sockaddr *dest_addr, <span class="keyword">socklen_t</span> addrlen);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ssize_t</span> recvfrom(<span class="keyword">int</span> sockfd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags, struct sockaddr *src_addr, <span class="keyword">socklen_t</span> *addrlen);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭套接字</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">close</span><span class="params">(<span class="keyword">int</span> fd)</span></span>;</span><br></pre></td></tr></table></figure><h5 id="sockaddr结构："><a href="#sockaddr结构：" class="headerlink" title="sockaddr结构："></a>sockaddr结构：</h5><blockquote><p>socket API是一 层抽象的网络编程接口 ,适用于各种底层网络协议,如IPv4、IPv6.然而, 各种网络协议的地址格式各不相同。</p></blockquote><p><img src="http://p9ff104hp.bkt.clouddn.com/%E4%B8%89%E7%A7%8D%E7%B1%BB%E5%9E%8B.jpg" alt="图片加载失败"></p><ul><li><p>注意：socket API可以都用 struct sockaddr *类型表 , 在使用的时候需要强制转化成sockaddr_in; 这样的好处是程序的通用性, 可以接收IPv4, IPv6, 以及UNIX Domain Socket各种类型的sockaddr结构体指针做为参数。</p><hr></li></ul><h4 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h4><blockquote><p>通过上面的学习对UDP有个直观的认识，再详细讨论以下几点：</p></blockquote><ul><li>无连接</li></ul><blockquote><p>知道目的端的IP和端口号就能传输，不需要建立连接。</p></blockquote><ul><li>不可靠传输</li></ul><blockquote><p>没有确认机制，没有重传机制，如果因为网络故障无法发送到对方，UDP协议层也不会给应用层返回任何错误信息。</p></blockquote><ul><li>面向数据报</li></ul><blockquote><p>不能够灵活的控制读写数据的次数和数量。</p></blockquote><ul><li>以上几点在代码中还能得到学习和理解。</li></ul><h5 id="服务器和客户端是怎么运行起来的？"><a href="#服务器和客户端是怎么运行起来的？" class="headerlink" title="服务器和客户端是怎么运行起来的？"></a>服务器和客户端是怎么运行起来的？</h5><p>先说说什么是回显服务器：</p><p>回显服务器是最简单的服务器，客户端发起请求，服务器收到请求，然后客户端发送什么内容，服务器就给客户端返回什么内容。</p><ul><li><strong>服务器：</strong></li></ul><blockquote><p>1、创建socket</p></blockquote><blockquote><p>2、绑定端口</p></blockquote><blockquote><p>3、循环的读取数据</p></blockquote><blockquote><p>4、针对读取到的数据进行计算和处理</p></blockquote><blockquote><p>5、把处理后的结果发回客户端</p></blockquote><ul><li><strong>客户端：</strong></li></ul><blockquote><p>1、创建socket文件</p></blockquote><blockquote><p>2、给服务器发送请求</p></blockquote><blockquote><p>3、从服务器中读取结果。</p></blockquote><ul><li>有了步骤，实现起来就只需要把步骤翻译成Code了：</li></ul><h5 id="服务器实现"><a href="#服务器实现" class="headerlink" title="服务器实现"></a>服务器实现</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//创建一个套接字，并检测是否创建成功</span></span><br><span class="line">    <span class="keyword">int</span> sockSer = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(sockSer == <span class="number">-1</span>)</span><br><span class="line">        perror(<span class="string">"socket"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addrSer</span>;</span>  <span class="comment">//创建一个记录地址信息的结构体</span></span><br><span class="line">    addrSer.sin_family = AF_INET;    <span class="comment">//使用AF_INET协议族</span></span><br><span class="line">    addrSer.sin_port = htons(<span class="number">5050</span>);     <span class="comment">//设置地址结构体中的端口号</span></span><br><span class="line">    addrSer.sin_addr.s_addr = inet_addr(<span class="string">"192.168.3.169"</span>);  <span class="comment">//设置通信ip</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//将套接字地址与所创建的套接字号联系起来，并检测是否绑定成功</span></span><br><span class="line">    <span class="keyword">socklen_t</span> addrlen = <span class="keyword">sizeof</span>(struct sockaddr);</span><br><span class="line">    <span class="keyword">int</span> res = bind(sockSer,(struct sockaddr*)&amp;addrSer, addrlen);</span><br><span class="line">    <span class="keyword">if</span>(res == <span class="number">-1</span>)</span><br><span class="line">        perror(<span class="string">"bind"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> sendbuf[<span class="number">256</span>];    <span class="comment">//申请一个发送数据缓存区</span></span><br><span class="line">    <span class="keyword">char</span> recvbuf[<span class="number">256</span>];    <span class="comment">//申请一个接收数据缓存区</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addrCli</span>;</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)  <span class="comment">//服务器一直循环接受客户端的请求</span></span><br><span class="line">    &#123;</span><br><span class="line">        recvfrom(sockSer,recvbuf,<span class="number">256</span>,<span class="number">0</span>,(struct  sockaddr*)&amp;addrCli, &amp;addrlen);     <span class="comment">//从指定地址接收客户端数据</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Cli:&gt;%s\n"</span>,recvbuf);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Ser:&gt;"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,sendbuf);</span><br><span class="line">        sendto(sockSer,sendbuf,<span class="built_in">strlen</span>(sendbuf)+<span class="number">1</span>,<span class="number">0</span>,(struct sockaddr*)&amp;addrCli, addrlen);    <span class="comment">//向客户端发送数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//创建一个套接字，并检测是否创建成功</span></span><br><span class="line">    <span class="keyword">int</span> sockCli = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(sockCli == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">"socket"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    addrSer.sin_family = AF_INET;    <span class="comment">//使用AF_INET协议族</span></span><br><span class="line">    addrSer.sin_port = htons(<span class="number">5050</span>);     <span class="comment">//设置地址结构体中的端口号</span></span><br><span class="line">    addrSer.sin_addr.s_addr = inet_addr(<span class="string">"192.168.3.169"</span>);  <span class="comment">//设置通信ip</span></span><br><span class="line">    <span class="keyword">socklen_t</span> addrlen = <span class="keyword">sizeof</span>(struct sockaddr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> sendbuf[<span class="number">256</span>];    <span class="comment">//申请一个发送数据缓存区</span></span><br><span class="line">    <span class="keyword">char</span> recvbuf[<span class="number">256</span>];    <span class="comment">//申请一个接收数据缓存区</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//向客户端发送数据</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Cli:&gt;"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,sendbuf);</span><br><span class="line">        sendto(sockCli, sendbuf, <span class="built_in">strlen</span>(sendbuf)+<span class="number">1</span>, <span class="number">0</span>, (struct sockaddr*)&amp;addrSer, addrlen);</span><br><span class="line">        接收来自客户端的数据</span><br><span class="line">        recvfrom(sockCli, recvbuf, BUFFER_SIZE, <span class="number">0</span>, (struct sockaddr*)&amp;addrSer, &amp;addrlen);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Ser:&gt;%s\n"</span>, recvbuf);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="问题思考"><a href="#问题思考" class="headerlink" title="问题思考"></a>问题思考</h4><p>1、UDP协议的特点以及和TCP协议的区别？</p><p>2、UDP连接建立过程分析、TCP呢？</p><p>3、UDP协议是不可靠的，为什么还要使用？</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;回显服务器的代码实现过程，文章加入了详细的设计过程以及其他的计算机网络理论知识。&lt;/p&gt;
&lt;p&gt;操作环境：CentOS 7.0 X64 操作系统、Vim编辑器、Gcc编译器。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="SO Kernal" scheme="http://yoursite.com/categories/SO-Kernal/"/>
    
    
      <category term="计算机网络" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
      <category term="UDP协议" scheme="http://yoursite.com/tags/UDP%E5%8D%8F%E8%AE%AE/"/>
    
      <category term="回显服务器" scheme="http://yoursite.com/tags/%E5%9B%9E%E6%98%BE%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+GitHub Blog</title>
    <link href="http://yoursite.com/2018/05/20/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%BF%83%E5%BE%97/"/>
    <id>http://yoursite.com/2018/05/20/博客搭建心得/</id>
    <published>2018-05-20T08:42:54.000Z</published>
    <updated>2018-06-17T07:41:07.315Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><hr><ul><li>利用周末时间搭建了Hexo + github + 个性化域名博客</li></ul><ul><li>通过不断地测试和完善，实现了常用功能以及基本的页面美化</li></ul><hr><a id="more"></a><p><img src="http://p9ff104hp.bkt.clouddn.com/13.jpg" alt="图片加载失败"></p><ul><li>在搭建过程中遇到了很多棘手的问题，在中途因为没有测试，还崩溃过，只能归零，从头再来。</li></ul><ul><li>非常感谢IT界众多大神的博客，给了我很多帮助，技术交流网站：知乎、简书、CSDN、github、掘金。</li></ul><ul><li>第二次搭建，我曾想到用Coding建仓库，但是后来想到github的影响力等，毕竟github是全球同性社交平台，呵呵。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h4&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;利用周末时间搭建了Hexo + github + 个性化域名博客&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;通过不断地测试和完善，实现了常用功能以及基本的页面美化&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="工具操作" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="Githubpage" scheme="http://yoursite.com/tags/Githubpage/"/>
    
      <category term="随想" scheme="http://yoursite.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
</feed>
